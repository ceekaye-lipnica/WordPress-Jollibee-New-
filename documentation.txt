HOW TO INSTALL WORDPRESS(HTML/CSS/JS should be ready):
1. install server(xampp)
2. donwload wordpress from wordpress.org 
3. copy and unzip the download file to htdocs
4. rename the extracted folder(wordpress) with the project name
5. create database
    5.1 go to localhost/phpmyadmin
    5.2 create a new database (remember the name)
6. Open browser, go to "localhost/PROJECT-NAME"
7. Select Language > English
8. Enter database name, database username = "root", database password=""
9. Enter sitename, username, password for wordpress dasboard account 


HOW TO CREATE TEMPLATES: 
1. go to htdocs > PROJECT-NAME > wp-contents > themes > create project folder
2. Right click on the  created folder, select GitBash
3  type in bash command: touch index.php style.css front-page.php 
        single.php header.php footer.php 404.php functions.php

ACTIVATE PROJECT THEME: 
1. Open style.css > type (add comment)
    /* 
        Theme Name: Project Name
        Description: 
        Author: 
        Version:
    
    */

2. Screenshot the project output, crop the image by 1200 x 900, save it inside the theme folder and rename it "screenshot.jpg"
3. Log in to dashboard, go to appearance > theme > then select the project theme to ACTIVATE


TEMPLATING: 
1. open header.php > copy/paste from top of index.html (<html> to closing tag of </header>)
2. open footer.php > copy/paste from index.html (<footer> to closing tag of </html>)
3. open index.php > type:
    <?php get_header() ?> => return the template from header.php
    <?php get_footer() ?> => return the template from footer.php
4. open front-page.php -> copy all code from index.php
5. Add the CSS/JS
    5.1 create folder named "style" > create style.css
    5.2 create folder named "script" > create script.css
    5.3 copy/paste your css code from static folder to style.css
    5.4 copy/paste your js code from static folder to script.css

CONNECT JS/CSS:
1. open header.php > insert "wp_head" inside the <head> Templating
    <?php wp_head() ?> -> connect your css to the template
2. open footer.php > insert "wp_footer" on the topline of footer.php, above the </body>
     <?php wp_footer() ?> -> connect your js to the template


CALL YOUR STYLE/SCRIPT USING PHP FUNCTION: 
1. on functions.php type: 

<?php

function PROJECT-NAME_assets(){
    // wp_enqueue_style -> load your css assets
    wp_enqueue_style('PROJECT-NAME-style', get_template_directory_uri() . "./css/style.css", microtime());
    wp_enqueue_style('PROJECT-NAME-icons', "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css", 1.0);
    wp_enqueue_style('PROJECT-NAME-slider-style', "https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.4/tiny-slider.css", 1.0);

    // wp_enqueue_script -> load your js assets
    wp_enqueue_script('PROJECT-NAME-slider-js', 'https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.4/min/tiny-slider.js', 1.0, [], true );
    wp_enqueue_script('PROJECT-NAME-script', get_template_directory_uri() . "./script/script.js", microtime(), [], true );

    //conditional loading of assets base on the current page
    if(is_front_page()) {
    wp_enqueue_script('PROJECT-NAME-slider', get_template_directory_uri() . "./script/slider.js", microtime(), [], true );
    }
}
//Hook that will run this function
add_action('wp_enqueue_scripts', 'PROJECT-NAME_assets');

NOTE: If CSS/JS do not load, press ctrl + F5 and check if wp_head() and wp_footer() are included on header.php/footer.php


HOW TO OUTPUT POST LIST TEMPLATE: 
1. open home.php > add get_header() and get_footer()
2. create a WordPress query between the above functions

    <?php if(have_posts()) : while(have_posts()) : the_post();?>
    
        //INSERT HTML TEMPLATE
    
    <?php
        endwhile;
        else: 
            echo "No post";
        endif;
    ?>


FUNCTIONS TO VIEW POST INFORMATION:
1. the_title() -> output the post the title
2. the_content() -> output the post body
3. the_permalink() -> output the post url
4. the_excerpt() -> output the post excerpt 
5. echo get_the_date('M j, Y') -> output the data
6. echo get_the_category($id)[0] -> name -> output the post category(array)
7. echo wp_trim_words(get_the_content(), 20) -> limit the number of words for the excerpt or contents
8. echo get_the_author_meta('first_name') -> output the author


HOW TO ADD THEME SUPPORT: 
1. open functions.php 

        <?php
        function blog_support(){
        add_theme_support('post-thumbnails'); // ADD FEATURED IMAGE
        add_theme_support('menus'); // ADD MENUS
        add_theme_support('title'); // ADD PAGE TITLE
        add_theme_support('custom-logo'); // ADD CUSTOM LOGO
        
        add_image_size('banner-sm', 220, 150, true ); // CREATE CUSTOM POST THUMBNAIL SIZE

        //CREATE A NAV LOCATIONS
        register_nav_menu( 'header_menu', 'Header Menu');
        register_nav_menu( 'footer_menu', 'Footer Menu');
    }

    add_action('after_setup_theme', 'blog_support');


HOW TO USE THEME SUPPORT ON A TEMPLATE: 
1. post-thumbnails
    <?php if(has_post_thumbnail()){
        the_post_thumbnail();
    } ?>
2. menu -> go to appearance menus
3. title -> go to header.php > add<title><is_front_page ? blogInfo('title) : wp_title()></title>
4. custom Logo -> go to header.php > replace static logo with: 
    <?php if ( function_exists( 'the_custom_logo' ) ) {
            the_custom_logo();
    }?>
    4.1 on the top nav bar > customize > Site Identity > click select logo
    4.2 on the top nav bar > customize > Site Identity > click select icon -> favicon

5. add_image_size -> this is inserted as parameter of the_post_thumbnail('ADD_IMAGE_SIZE_TITLE'). see line 118.
6. register_nav_menu -> go to appearance > menu > create menu > manage menu locations 



HOW TO ADD NAV MENUS:
1. go to header.php > replace static nav with:
     <?php wp_nav_menu( array(
              'theme_location' => 'header_menu',
    ))?>


HOW TO CREATE SINGLE POST TEMPLATE: 
1. go to single.php
    
    <?php if(have_posts()) : while(have_posts()) : the_post();?>
    
        //INSERT HTML TEMPLATE
    
    <?php
        endwhile;
        else: 
            echo "No post";
        endif;
    ?>


CREATE CUSTOME QUERY: 
1. Create variable that will holds the arguments use on the query
    $args = WP_Query(array(
        'post_type' => 'post' //this can be 'post', 'page', 'custome post type'
        'posts_per_page' => 3 // limit of post to be showed. -1 to show all post
    ))

     <?php if($args->have_posts()) : while($args->have_posts()) :  $args->the_post();?>
    
        //INSERT HTML TEMPLATE
    
    <?php
        endwhile;
        else: 
            echo "No post";
        endif;
        wp_reset_postdata // ensure that the query is properly reset
    ?>


TYPE OF QUERY: 
1. tax_query => array(array(
    'taxonomy' => 'category',
    'field' => 'slug', //name or slug
    'terms' => 'card-lg-banner',
));

2. 'date_query' => array( //use to filter by date_query
        array(
            'after' => 'June 22, 2023'
            'before'  => 'June 25, 2023'
            inclusive => true //para kasama yung june 22 & 25. Hindi lang yung between sa dates
));

3. 'meta_query' => array( // use to filter custom fields
        array(
            'key'  => 'feat-size',
            'value'  => 'feat-lg',
            'compare' => 'LIKE' ,
));


CUSTOM POST TYPE:
1. functions.php

<?php

function jollibee_custom_post(){

    $food_label = array(
            'name'          => __('Foods' , 'textdomain'),
            'singular_name' => __('Food' , 'textdomain'),
            'add_new'       => __('Add Food' , 'textdomain'),
            'edit_item'     => __('Edit Food' , 'textdomain'),
            'add_new_item'  => __('Add New Food' , 'textdomain'),
            'all_items'     => __('Foods' , 'textdomain'),
    );

    $foods_args = array(
        'labels' => $food_label,
        'public' => true,
        'capability_type' => 'post',
        'show_ui' => true,
        'supports' => array('title' 'thumbnail' 'editor' 'custom-fields' 'excerpt'),
    );
    register_post_type('foods', $foods_args);
}
add_action('init', 'jollibee_custom_post');

New post type should appear on the side menu
NOTE: Sometimes custom post data are not showing on your template, if this happened, go to Settings > Permalinks
> select plain then save. After saving, select Post Name then save. This will reset the permalink of all your posts.


HOW TO INSTALL PLUGINS: 
1. go to plugins > add new > search plugins
2. install then activate

DOWNLOAD WORDPRESS PLUGINS ZIP FILE: 
1. go to plugins > add new > upload plugins
2. browse your system file then select and open your plugins zip file
3. install then activate

COMMON PLUGINS TO USE: 
1. Contact form 7 -> create a contact form
2. Smush -> use to upload webp and optimized image 
3. ACF - advance custom field -> use to add custom fields on your post

CREATE CUSTOM BLOCK:
NOTE: ACF SHOULD BE INSTALLED PRO Version

1. Register new block
    1.1 go to functions.php type: 
        <?php 

        // PANG GAWA NG CUSTOMIZE NA BLOCK OR TEMPLATE
        function jollibee_register_blocks() {
            if ( function_exists( 'acf_register_block' ) ) {
                
                acf_register_block( array(
                    'name'          => 'two-columns',
                    'title'         => __( 'Two Columns' ),
                    'render_template'   => 'blocks/two-cols.php',
                    'category'      => 'jollibee-blocks',
                    'icon'          => 'format-image',
                    'mode'          => 'edit',
                    'keywords'      => array( 'grid', 'column')
                ));

                acf_register_block( array(
                    'name'          => 'menu-slider',
                    'title'         => __( 'Menu Slider' ),
                    'render_template'   => 'blocks/menu-slider.php',
                    'category'      => 'jollibee-blocks',
                    'icon'          => 'slides',
                    'mode'          => 'edit',
                    'keywords'      => array( 'slider', 'menu')
                ));
            } 
        } 

        add_action('acf/init', 'jollibee_register_blocks' );

=>The code above will register a new block that will appear on the list of custom blocks in ACF

    1.2 Create a block template, name it identical with the render_template

2. Open two-cols.php type: 

            <?php 
            //Create custom field that will be used inside the template
            $header = get_field('header');
            $body = get_field('body');
            $image = get_field('image');
            $orientation = get_field('orientation');
            ?>

            // HTML template of the block. This will be the return HTML code of this block. All custom field should be echo inside this template. 
            <section class="two__cols <?php echo $orientation; ?>" >
                <div class="container">
                    <div class="two__cols__grid">

                        <div class="col__1">
                            <img src="<?php echo $image; ?>" alt="">
                        </div>
                        <div class="col__2">
                            <h3><?php echo $header; ?></h3>
                            <?php echo $body; ?>
                        </div>

                    </div>
                    
                </div>
            </section>

3. Create custom field on ACF: 
    3.1 add new field groups and  add fields. Name should use in the template should be identical with the name of the field.
    3.2 Under the settings. Rules: 
        show this field group if = block
        select the registered block on the third dropdown menu
    3.3 click save

4. Go to post > add block > select the new created block > complete all 


